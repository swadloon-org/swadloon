{"version":3,"sources":["../../src/commands/figma-sync.ts"],"sourcesContent":["import path from 'path';\n\nimport { Config, Flags } from '@oclif/core';\nimport * as t from 'io-ts';\n\nimport { extract } from '@newrade/core-figma-extractor';\nimport { loadDotEnv } from '@newrade/core-node-utils';\n\nimport { BaseCommand } from '../base-command.js';\n\nexport type ENV = t.TypeOf<typeof Env>;\nexport const Env = t.intersection([\n  t.type({}),\n  t.type({\n    FIGMA_TOKEN: t.string,\n    FIGMA_FILE: t.string,\n  }),\n]);\n\nexport default class FigmaSync extends BaseCommand {\n  static description = 'sync design tokens from figma file';\n\n  static examples = [`$ nr figma-sync`];\n\n  static flags = {\n    test: Flags.boolean({\n      char: 't',\n      description:\n        'the test flag is used in integration tests, it will not output versions or dates',\n    }),\n    help: Flags.help({ char: 'h' }),\n  };\n\n  static args = [{ name: 'path', description: 'relative output path' }];\n\n  constructor(argv: string[], config: Config) {\n    super(argv, config, { name: 'figma-sync' });\n  }\n\n  async init() {}\n\n  async run() {\n    const env = loadDotEnv<ENV>({\n      schema: Env,\n      dotEnvPath: '.env',\n      packageName: 'core-cli',\n    });\n\n    const { args, flags } = await this.parse(FigmaSync);\n\n    this.log(`running: extract command`);\n\n    await extract({\n      extractorName: '',\n      version: '',\n      figmaFile: env.FIGMA_FILE,\n      figmaToken: env.FIGMA_TOKEN,\n      outputDir: path.resolve(process.cwd(), args && args.path ? args.path : 'figma-export'),\n      inputColorThemeNamespace: false,\n      outputVersion: flags.test ? false : true,\n      outputDate: flags.test ? false : true,\n    });\n\n    this.log(`running: extract command`);\n  }\n}\n"],"names":["t","FigmaSync","BaseCommand","description","examples","flags","test","Flags","boolean","char","help","args","name","constructor","argv","config","init","run","env","loadDotEnv","schema","Env","dotEnvPath","packageName","parse","log","extract","extractorName","version","figmaFile","FIGMA_FILE","figmaToken","FIGMA_TOKEN","outputDir","path","resolve","process","cwd","inputColorThemeNamespace","outputVersion","outputDate","intersection","type","string"],"mappings":"AAAA;;;;;AAAiB,IAAA,KAAM,kCAAN,MAAM,EAAA;AAEO,IAAA,KAAa,WAAb,aAAa,CAAA;AAC/BA,IAAAA,CAAC,mCAAM,OAAO,EAAb;AAEW,IAAA,mBAA+B,WAA/B,+BAA+B,CAAA;AAC5B,IAAA,cAA0B,WAA1B,0BAA0B,CAAA;AAEzB,IAAA,cAAoB,WAApB,oBAAoB,CAAA;AAWjC,MAAMC,SAAS,SAASC,cAAW,YAAA;IAChD,OAAOC,WAAW,GAAG,oCAAoC,CAAC;IAE1D,OAAOC,QAAQ,GAAG;QAAC,CAAC,eAAe,CAAC;KAAC,CAAC;IAEtC,OAAOC,KAAK,GAAG;QACbC,IAAI,EAAEC,KAAK,MAAA,CAACC,OAAO,CAAC;YAClBC,IAAI,EAAE,GAAG;YACTN,WAAW,EACT,kFAAkF;SACrF,CAAC;QACFO,IAAI,EAAEH,KAAK,MAAA,CAACG,IAAI,CAAC;YAAED,IAAI,EAAE,GAAG;SAAE,CAAC;KAChC,CAAC;IAEF,OAAOE,IAAI,GAAG;QAAC;YAAEC,IAAI,EAAE,MAAM;YAAET,WAAW,EAAE,sBAAsB;SAAE;KAAC,CAAC;IAEtEU,YAAYC,IAAc,EAAEC,MAAc,CAAE;QAC1C,KAAK,CAACD,IAAI,EAAEC,MAAM,EAAE;YAAEH,IAAI,EAAE,YAAY;SAAE,CAAC,CAAC;KAC7C;IAED,MAAMI,IAAI,GAAG,EAAE;IAEf,MAAMC,GAAG,GAAG;QACV,MAAMC,GAAG,GAAGC,CAAAA,GAAAA,cAAU,AAIpB,CAAA,WAJoB,CAAM;YAC1BC,MAAM,EAAEC,GAAG;YACXC,UAAU,EAAE,MAAM;YAClBC,WAAW,EAAE,UAAU;SACxB,CAAC,AAAC;QAEH,MAAM,EAAEZ,IAAI,CAAA,EAAEN,KAAK,CAAA,EAAE,GAAG,MAAM,IAAI,CAACmB,KAAK,CAACvB,SAAS,CAAC,AAAC;QAEpD,IAAI,CAACwB,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;QAErC,MAAMC,CAAAA,GAAAA,mBAAO,AASX,CAAA,QATW,CAAC;YACZC,aAAa,EAAE,EAAE;YACjBC,OAAO,EAAE,EAAE;YACXC,SAAS,EAAEX,GAAG,CAACY,UAAU;YACzBC,UAAU,EAAEb,GAAG,CAACc,WAAW;YAC3BC,SAAS,EAAEC,KAAI,QAAA,CAACC,OAAO,CAACC,OAAO,CAACC,GAAG,EAAE,EAAE1B,IAAI,IAAIA,IAAI,CAACuB,IAAI,GAAGvB,IAAI,CAACuB,IAAI,GAAG,cAAc,CAAC;YACtFI,wBAAwB,EAAE,KAAK;YAC/BC,aAAa,EAAElC,KAAK,CAACC,IAAI,GAAG,KAAK,GAAG,IAAI;YACxCkC,UAAU,EAAEnC,KAAK,CAACC,IAAI,GAAG,KAAK,GAAG,IAAI;SACtC,CAAC,CAAC;QAEH,IAAI,CAACmB,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;KACtC;CACF;kBA9CoBxB,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARvB,MAAMoB,GAAG,GAAGrB,CAAC,CAACyC,YAAY,CAAC;IAChCzC,CAAC,CAAC0C,IAAI,CAAC,EAAE,CAAC;IACV1C,CAAC,CAAC0C,IAAI,CAAC;QACLV,WAAW,EAAEhC,CAAC,CAAC2C,MAAM;QACrBb,UAAU,EAAE9B,CAAC,CAAC2C,MAAM;KACrB,CAAC;CACH,CAAC,AAAC;QANUtB,GAAG,GAAHA,GAAG"}