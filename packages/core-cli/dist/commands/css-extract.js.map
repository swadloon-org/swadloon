{"version":3,"sources":["../../src/commands/css-extract.ts"],"sourcesContent":["import { spawnSync } from 'child_process';\n\nimport { Config } from '@oclif/core';\n\nimport { ENV, Env } from '@newrade/core-css-extractor';\nimport { getShellForPlatform, loadDotEnv } from '@newrade/core-node-utils';\n\nimport { BaseCommand } from '../base-command.js';\n\nexport default class CssExtract extends BaseCommand {\n  static description =\n    'Create CSS tokens (plain .css files) from Vanilla-extract styles definition files (*.css.ts)';\n\n  static examples = [`$ nr css-extract`];\n\n  static args = [];\n\n  static flags = {};\n\n  constructor(argv: string[], config: Config) {\n    super(argv, config, { name: 'css-extract' });\n  }\n\n  async run() {\n    this.log(`loading .env in ${process.cwd()}`);\n\n    const env = loadDotEnv<ENV>({\n      schema: Env,\n      dotEnvPath: '.env',\n      packageName: 'core-cli',\n    });\n\n    this.log(`CSS_EXTRACTOR_ENTRIES_GLOB: ${env.CSS_EXTRACTOR_ENTRIES_GLOB}`);\n    this.log(`CSS_EXTRACTOR_OUTPUT_PATH: ${env.CSS_EXTRACTOR_OUTPUT_PATH}`);\n\n    const { args, flags } = await this.parse(CssExtract);\n\n    const command = `cross-env TS_NODE_PROJECT=../../tsconfig.node-cli.json node -r ts-node/register ../../node_modules/webpack/bin/webpack --config ../core-css-extractor/webpack.prod.config.ts`;\n\n    this.log(`running: ${command}`);\n\n    const cmd = spawnSync(command, {\n      shell: getShellForPlatform(),\n      stdio: ['inherit', 'inherit', 'pipe'],\n      env: process.env,\n    });\n\n    if (cmd.stderr && cmd.stderr.toString().length) {\n      const stderr = cmd.stderr.toString();\n      if (/error/gi.test(stderr)) {\n        this.logError(`${stderr}`);\n        throw new Error(stderr);\n      }\n      this.log(`${stderr}`);\n    }\n\n    this.log(`finished`);\n  }\n}\n"],"names":["CssExtract","BaseCommand","description","examples","args","flags","constructor","argv","config","name","run","log","process","cwd","env","loadDotEnv","schema","Env","dotEnvPath","packageName","CSS_EXTRACTOR_ENTRIES_GLOB","CSS_EXTRACTOR_OUTPUT_PATH","parse","command","cmd","spawnSync","shell","getShellForPlatform","stdio","stderr","toString","length","test","logError","Error"],"mappings":"AAAA;;;;;AAA0B,IAAA,aAAe,WAAf,eAAe,CAAA;AAIhB,IAAA,iBAA6B,WAA7B,6BAA6B,CAAA;AACN,IAAA,cAA0B,WAA1B,0BAA0B,CAAA;AAE9C,IAAA,cAAoB,WAApB,oBAAoB,CAAA;AAEjC,MAAMA,UAAU,SAASC,cAAW,YAAA;IACjD,OAAOC,WAAW,GAChB,8FAA8F,CAAC;IAEjG,OAAOC,QAAQ,GAAG;QAAC,CAAC,gBAAgB,CAAC;KAAC,CAAC;IAEvC,OAAOC,IAAI,GAAG,EAAE,CAAC;IAEjB,OAAOC,KAAK,GAAG,EAAE,CAAC;IAElBC,YAAYC,IAAc,EAAEC,MAAc,CAAE;QAC1C,KAAK,CAACD,IAAI,EAAEC,MAAM,EAAE;YAAEC,IAAI,EAAE,aAAa;SAAE,CAAC,CAAC;KAC9C;IAED,MAAMC,GAAG,GAAG;QACV,IAAI,CAACC,GAAG,CAAC,CAAC,gBAAgB,EAAEC,OAAO,CAACC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAE7C,MAAMC,GAAG,GAAGC,CAAAA,GAAAA,cAAU,AAIpB,CAAA,WAJoB,CAAM;YAC1BC,MAAM,EAAEC,iBAAG,IAAA;YACXC,UAAU,EAAE,MAAM;YAClBC,WAAW,EAAE,UAAU;SACxB,CAAC,AAAC;QAEH,IAAI,CAACR,GAAG,CAAC,CAAC,4BAA4B,EAAEG,GAAG,CAACM,0BAA0B,CAAC,CAAC,CAAC,CAAC;QAC1E,IAAI,CAACT,GAAG,CAAC,CAAC,2BAA2B,EAAEG,GAAG,CAACO,yBAAyB,CAAC,CAAC,CAAC,CAAC;QAExE,MAAM,EAAEjB,IAAI,CAAA,EAAEC,KAAK,CAAA,EAAE,GAAG,MAAM,IAAI,CAACiB,KAAK,CAACtB,UAAU,CAAC,AAAC;QAErD,MAAMuB,OAAO,GAAG,CAAC,4KAA4K,CAAC,AAAC;QAE/L,IAAI,CAACZ,GAAG,CAAC,CAAC,SAAS,EAAEY,OAAO,CAAC,CAAC,CAAC,CAAC;QAEhC,MAAMC,GAAG,GAAGC,CAAAA,GAAAA,aAAS,AAInB,CAAA,UAJmB,CAACF,OAAO,EAAE;YAC7BG,KAAK,EAAEC,CAAAA,GAAAA,cAAmB,AAAE,CAAA,oBAAF,EAAE;YAC5BC,KAAK,EAAE;gBAAC,SAAS;gBAAE,SAAS;gBAAE,MAAM;aAAC;YACrCd,GAAG,EAAEF,OAAO,CAACE,GAAG;SACjB,CAAC,AAAC;QAEH,IAAIU,GAAG,CAACK,MAAM,IAAIL,GAAG,CAACK,MAAM,CAACC,QAAQ,EAAE,CAACC,MAAM,EAAE;YAC9C,MAAMF,MAAM,GAAGL,GAAG,CAACK,MAAM,CAACC,QAAQ,EAAE,AAAC;YACrC,IAAI,UAAUE,IAAI,CAACH,MAAM,CAAC,EAAE;gBAC1B,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAEJ,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,IAAIK,KAAK,CAACL,MAAM,CAAC,CAAC;aACzB;YACD,IAAI,CAAClB,GAAG,CAAC,CAAC,EAAEkB,MAAM,CAAC,CAAC,CAAC,CAAC;SACvB;QAED,IAAI,CAAClB,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;KACtB;CACF;kBAjDoBX,UAAU"}